#set($classInfo=$collection.classInfo)
#set($queryConditions=$collection.queryConditions)
#set($columns=$collection.columns)
<!--
    具体的业务逻辑修改的地方请查看有标志 `TODO` 的地方
    其他业务逻辑根据实际的业务需求改动添加
    this.getDataList() 获取数据列表入口
    this.searchForm 查询表单
    ...
-->
<style lang="less">
  //less样式文件 -> @import "./demo.less";
</style>
<template>
    <div class="search" style="position: relative;">
    <Row>
      <Col>
        <Card>
          <Row>
            <Form ref="searchForm" :model="searchForm" inline :label-width="70" class="search-form">
#foreach($queryCond in $queryConditions)
#if($velocityCount % 2 == 1)
              <Form-item label="${queryCond.comment}" prop="entity.${queryCond.queryField}">
#if($queryCond.componentType == 'Input')
                <Input type="text" v-model="searchForm.entity.${queryCond.queryField}" clearable placeholder="请输入${queryCond.comment}" style="width: 200px"/>
#end
#if($queryCond.componentType == 'Select')
                <Select v-model="searchForm.entity.${queryCond.queryField}" clearable placeholder="请输入${queryCond.comment}" style="width: 200px">
                    <Option value=""></Option>
#foreach($enumItem in $queryCond.enumData)
                    <Option :value="${enumItem.key}">${enumItem.value}</Option>
#end
                </Select>
#end
              </Form-item>
#else
              <span v-if="searchFormDropFlag">
#if(${queryCond.type} == 'java.util.Date')
                <Form-item label="${queryCond.comment}">
                  <DatePicker type="daterange" format="yyyy-MM-dd" clearable
                              @on-change="onSearchDataChange"
                              placeholder="选择${queryCond.comment}"
                              style="width: 200px"></DatePicker>
                </Form-item>
#else
                <Form-item label="${queryCond.comment}" prop="entity.${queryCond.queryField}">
#if($queryCond.componentType == 'Input')
                    <Input type="text" v-model="searchForm.entity.${queryCond.queryField}" clearable placeholder="请输入${queryCond.comment}" style="width: 200px"/>
#end
#if($queryCond.componentType == 'Select')
                    <Select v-model="searchForm.entity.${queryCond.queryField}" clearable placeholder="请输入${queryCond.comment}" style="width: 200px">
                        <Option value=""></Option>
#foreach($enumItem in $queryCond.enumData)
                        <Option :value="${enumItem.key}">${enumItem.value}</Option>
#end
                    </Select>
#end
                </Form-item>
#end
              </span>
#end
#end
              <Form-item style="margin-left:-35px;">
                <Button @click="onHandleSearch" type="primary" icon="ios-search">搜索</Button>
                <Button @click="onHandleReset">重置</Button>
                <a class="drop-down" @click="onSearchFormDropDown">{{searchFormDropDownContent}}
                  <Icon type="ios-arrow-down"></Icon>
                </a>
              </Form-item>
            </Form>
          </Row>
          <Row class="operation">
            <Button @click="onAddData" type="primary" icon="md-add">添加数据</Button>
            <Button @click="onExport" type="primary" icon="md-cloud-download">导出EXCEl</Button>
            <Dropdown @on-click="handleDropdown">
                <Button>
                    更多操作
                    <Icon type="ios-arrow-down"></Icon>
              </Button>
              <DropdownMenu slot="list">
                <DropdownItem v-for="item in dropdownItemList" :name="item.value" :key="item.name">{{item.name}}
                </DropdownItem>
              </DropdownMenu>
            </Dropdown>
          </Row>
          <!--- 数据列表 --->
          <Row class="margin-top-10 searchable-table-con1">
            <Table :loading="loading" border :columns="columns" :data="dataList" sortable="custom" ref="table">
            </Table>
          </Row>
          <!--- END 数据列表 --->

          <!--- 分页组件 --->
          <Row type="flex" justify="end" class="code-row-bg page">
            <Page :current="this.searchForm.pageNumber" :total="total" :page-size="this.searchForm.pageSize"
                  @on-change="onChangePage" @on-page-size-change="onChangePageSize" :page-size-opts="[10,20,50,100]"
                  size="small" show-total show-elevator show-sizer></Page>
          </Row>
          <!--- END 分页组件 --->
        </Card>
      </Col>
    </Row>
    <!--- 添加数据模态框 --->
    <Card class="x-modal" v-show="formModalVisible">
      <div class="x-modal-header">
        <span class="x-modal-goback" @click.stop="hideFormModal">
            <slot name="goback">
              <Icon type="md-arrow-back" size="30"></Icon><span style="margin-left: 10px">返回</span>
            </slot>
        </span>
      </div>
      <div class="x-modal-content">
      <Form slot="content" ref="submitFormData" :model="submitFormData" :label-width="90" :rules="submitFormDataValidate">
#foreach($column in $columns)
        <FormItem label="${column.comment}" prop="${column.fieldName}">
#if($column.componentType == 'Input')
          <Input v-model="submitFormData.${column.fieldName}" style="width:40%"/>
#end
#if($column.componentType == 'Select')
            <Select v-model="submitFormData.${column.fieldName}" clearable placeholder="请输入${column.comment}" style="width:40%">
#foreach($enumItem in $column.enumData)
                <Option :value="${enumItem.key}">${enumItem.value}</Option>
#end
            <Select>
#end
        </FormItem>
#end
      </Form>
      <div slot="footer" style="border-top:1px solid #0c7cb5;padding:20px;">
        <div style="float: right;">
            <Button type="error" @click="hideFormModal">取消</Button>
            <Button type="primary" :loading="submitLoading" @click="submitData">提交</Button>
        </div>
      </div>
      </div>
    </Card>
    <!--- END 添加数据模态框 --->
  </div>
</template>

<script>
  import ${classInfo.className}Api from './${classInfo.className}Api'

  export default {
    name: "user-manage",
    data() {
      return {
        modalType: 0,
        //添加数据模态框是否显示
        formModalVisible: false,
        //模态框标题
        modalTitle: "",
        //列表数据加载中标识
        loading: false,
        /**
         * 更多操作下拉数据
         * 需要新增操作功能再次添加，然后编辑handleDropdown事件函数添加对应业务逻辑
         * TODO
         */
        dropdownItemList: [
          {
            "name": "刷新",
            "value": "refresh",
          }
        ],
        //数据总量，查询getDataList返回结果时设置total
        total: 0,
        //更多查询框是否显示
        searchFormDropFlag: false,
        //查询条件跟多按钮标题，onSearchFormDropDown事件触发时改变
        searchFormDropDownContent: "展开",
        /**查询表单数据 TODO */
        searchForm: {
          pageNumber: 1,
          pageSize: 10,
          entity: {
              startDate:'',
              endDate:'',
#foreach($queryCond in $queryConditions)
            ${queryCond.queryField}:''#if($velocityCount<$columns.size()),#end

#end
          }
        },
        /** 表单校验规则 TODO */
        submitFormDataValidate: {
#foreach($column in $columns)
#if("${column.notNull}"=="NOT NULL" && ${column.fieldName} != "id")
            ${column.fieldName}: [
                {required: true, message: "${column.comment}不能为空"}
            ]#if($velocityCount<$columns.size()),#end

#end
#end
        },
        /** 表单数据 TODO */
        submitFormData: {
#foreach($column in $columns)
          ${column.fieldName}:''#if($velocityCount<$columns.size()),#end

#end
        },
        //提交表单中状态标识
        submitLoading: false,
        /** 数据列表字段设置 TODO */
        columns: [
#foreach($column in $columns)
#if(${column.fieldName} == 'state')
          {
            title: "状态",
            key: "state",
            align: "center",
            render: (h, params) => {
              let color = '';
              let text = '';
              if (params.row.state === 1) {
                color = 'green';
                text = "可用";
              } else if (params.row.state === 0) {
                color = 'yellow';
                text = "失效";
              }
              return h('Tag', {
                props: {
                  color: color
                }
              }, text);
            }
          },
#else
          {
          	title: "${column.comment}",
            key: "${column.fieldName}",
            align: "center"
          },
#end
#end
          {
            title: "操作",
            key: "action",
            align: "center",
            render: (h, params) => {
              return h("div", [
                h(
                  "Button",
                  {
                    props: {
                      type: "primary",
                      size: "small"
                    },
                    style: {
                      marginRight: "5px"
                    },
                    on: {
                      click: () => {
                        this.edit(params.row);
                      }
                    }
                  },
                  "编辑"
                ),
                h(
                  "Button",
                  {
                    props: {
                      type: "error",
                      size: "small"
                    },
                    on: {
                      click: () => {
                        this.remove(params.row);
                      }
                    }
                  },
                  "删除"
                )
              ]);
            }
          }
        ],
        //数据列表数据，在getDataList函数中设置值
        dataList: []
      };
    },
    /**
     * 模板渲染成html或者进入路由前调用
     */
    created() {
      //TODO
    },
    /**
     * 模板渲染后调用
     */
    mounted() {
      //TODO

      //获取数据
      this.getDataList();
    },
    /**
     * TODO 计算属性
     */
    computed: {

    },
    //引用组件
    // components: [],
    methods: {
        /**
         * 导出
         */
        onExport(){
                ${classInfo.className}Api.export(this.searchForm.entity)
        },
      /**
       * 页码改变事件
       */
      onChangePage(v) {
        this.searchForm.pageNumber = v;
        this.getDataList();
      },
      /**
       * 分页容量改变事件
       */
      onChangePageSize(v) {
        this.searchForm.pageSize = v;
        this.getDataList();
      },
      /**
       * 日期控件数据改变事件
       */
      onSearchDataChange(v) {
        if (v) {
          this.searchForm.entity.startDate = v[0];
          this.searchForm.entity.endDate = v[1];
        }
      },
      /**
       * 查询事件
       */
      onHandleSearch() {
        this.searchForm.pageNumber = 1;
        this.searchForm.pageSize = 10;
        this.getDataList();
      },
      /**
       * 重置
       */
      onHandleReset() {
        this.$refs.searchForm.resetFields();
        this.searchForm.pageNumber = 1;
        this.searchForm.pageSize = 10;
        this.getDataList();
      },
      /**
       * 获取数据列表
       */
      getDataList() {
        if (this.loading) {
        	this.$Message.warning('数据请求中，请勿重复提交');
            return;
        }
        //TODO 获取数据列表业务逻辑
        this.loading = true;
        ${classInfo.className}Api.pageQuery(this.searchForm).then(res => {
            this.loading = false;
            if (!res)
                return;
            let data = res.data.data;
            this.total = res.data.totalCount;
            this.dataList = data;
        }, res => {
            this.loading = false;
        });
      },
      /**
       * 更多操作功能处理
       */
      handleDropdown(name) {
        if (name === "refresh") { //刷新
          this.getDataList();
        }
        //TODO 添加操作功能时，在此处添加业务判断

      },
      hideFormModal() {
        this.formModalVisible = false;
      },
      /**
       * 添加表单数
       */
      submitData() {
        if (this.submitLoading) {
          this.$Message.warning('数据提交中，请勿重复提交');
          return;
        }
        this.$refs.submitFormData.validate (valid=>{
            if (valid) {
                this.submitLoading = true;
                //TODO 提交业务逻辑
                console.log(this.submitFormData)
                ${classInfo.className}Api.saveOrUpdate(this.submitFormData).then(res=>{
                    this.submitLoading = false;
                    if (!res)
                        return;
                    this.$Message.success('处理成功');
                    setTimeout(()=>{
                        //处理成功隐藏添加框
                        this.hideFormModal();
                        this.getDataList();
                    }, 500);
                }, res => {
                    this.submitLoading = false;
                });
          }
        });
      },
      /**
       * 添加数据
       */
      onAddData() {
        this.modalType = 0;
        this.modalTitle = "添加";
        this.submitFormData = {};
        this.$refs.submitFormData.resetFields();
        this.formModalVisible = true;
      },
      /**
       * 编辑数据
       */
      edit(v) {
        this.modalType = 1;
        this.modalTitle = "编辑";
        this.submitFormData = {};
        this.$refs.submitFormData.resetFields();
        // 转换null为""
        for (let attr in v) {
          if (v[attr] === null) {
            v[attr] = "";
          }
        }
        let str = JSON.stringify(v);
        let dataInfo = JSON.parse(str);
        this.submitFormData = dataInfo;

        this.formModalVisible = true;
      },
      /**
       * 删除数据
       * @param v
       */
      remove(v) {
        this.$Modal.confirm ({
            title: "确认删除",
            content: "您确认要删除 " + v.name + " ?",
            onOk:() => {
                //TODO
                ${classInfo.className}Api.deleteById(v.id).then(res => {
                    this.$Message.info('删除成功');
                    setTimeout(() => {
                        this.getDataList();
                    }, 1000);
                });
            }
        });
      },
      /**
       * 更多查询条件展开和收起
       */
      onSearchFormDropDown() {
        if (this.searchFormDropFlag) {
          this.searchFormDropDownContent = "展开";
          this.dropDownIcon = "chevron-down";
        } else {
          this.searchFormDropDownContent = "收起";
          this.dropDownIcon = "chevron-up";
        }
        this.searchFormDropFlag = !this.searchFormDropFlag;
      }
    }
  };
</script>

